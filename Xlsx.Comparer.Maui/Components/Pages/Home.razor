@page "/"
@using ClosedXML.Excel
@using CommunityToolkit.Maui.Alerts
@using CommunityToolkit.Maui.Storage

<p>Selecciona dos archivos de Excel y comparelos para visualizar las diferencias.</p>

<StepControl OnFinish="OnFinishAsync" FinishButtonText="Comparar" Disabled="@_comparing">
    <Step Title="Seleccionar el primer archivo" IsCompleted="_filesSelected[0].IsSelected">
        <button class="btn btn-dark" disabled="@_comparing" @onclick="() => SelectFileAsync()">@(_filesSelected[0].IsSelected ? "Cambiar" : "Seleccionar")</button>
    </Step>
    <Step Title="Seleccionar el segundo archivo" IsCompleted="_filesSelected[1].IsSelected">
        <button class="btn btn-dark" disabled="@_comparing" @onclick="() => SelectFileAsync(1)">@(_filesSelected[1].IsSelected ? "Cambiar" : "Seleccionar")</button>
    </Step>
</StepControl>

@if (_comparing)
{
    <div class="alert alert-info mt-2">
        Estoy comparando los archivos, por favor espere :)
    </div>
}

@if (!string.IsNullOrEmpty(comparationFilePath))
{
    <div class="alert alert-success mt-2">
        <p>
            !Listo!, generé un nuevo archivo de Excel con las diferencias entre ambos. Recuerda que lo que se añadió en el segundo archivo se encuentra de color verde,
            lo que se modificó está en color naranja y lo que se eliminó en color rojo.
        </p>
        <div class="btn-group mt-2">
            <button class="btn btn-primary" @onclick="OnSaveFileClickAsync">Guardar archivo con diferencias</button>
            <button class="btn btn-success" @onclick="OnShareButtonClickAsync">Compartir archivo con diferencias</button>
        </div>
    </div>
}

@code {
    private SelectedFileDto[] _filesSelected = new[]
    {
        new SelectedFileDto(false, string.Empty),
        new SelectedFileDto(false, string.Empty),
    };

    private bool _comparing = false;

    private string comparationFilePath = string.Empty;

    private async Task SelectFileAsync(int fileIndex = 0)
    {
        _filesSelected[fileIndex] = new SelectedFileDto(false, string.Empty);

        var extensions = new[] { ".xlsx" };
        var customFileType = new FilePickerFileType(new Dictionary<DevicePlatform, IEnumerable<string>>{
                { DevicePlatform.iOS, extensions },
                // For Android: https://learn.microsoft.com/es-es/dotnet/maui/platform-integration/storage/file-picker?view=net-maui-8.0&tabs=android
                { DevicePlatform.Android, new []{ "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" } },
                { DevicePlatform.WinUI, extensions },
                { DevicePlatform.Tizen, extensions },
                { DevicePlatform.macOS, extensions },
        });

        var pickOptions = new PickOptions()
            {
                PickerTitle = "Por favor seleccione un archivo de Excel",
                FileTypes = customFileType
            };

        // Request to pick the file from device
        // About FilePicker: https://learn.microsoft.com/en-us/dotnet/maui/platform-integration/storage/file-picker?view=net-maui-8.0&tabs=windows#pick-a-file
        FileResult? fileResult = await FilePicker.Default.PickAsync(pickOptions);

        if (fileResult is null)
        {
            await App.Current!.MainPage!.DisplayAlert("Información", "Por favor seleccione un archivo de Excel.", "Ok");
            return;
        }

        _filesSelected[fileIndex] = new SelectedFileDto(true, fileResult.FullPath);
    }

    private async Task OnFinishAsync()
    {
        comparationFilePath = string.Empty;
        _comparing = true;

        await Task.Delay(1000);

        using (var wb1 = new XLWorkbook(_filesSelected[0].FullPath))
        {
            IXLWorksheet? sheet1 = wb1.Worksheets.FirstOrDefault();

            if (sheet1 is null)
            {
                await App.Current!.MainPage!.DisplayAlert("Información", "El primer archivo no tiene hojas, por favor escoja un archivo de Excel con hojas.", "Ok");
                return;
            }

            using (var wb2 = new XLWorkbook(_filesSelected[1].FullPath))
            {
                IXLWorksheet? sheet2 = wb2.Worksheets.FirstOrDefault();

                if (sheet2 is null)
                {
                    await App.Current!.MainPage!.DisplayAlert("Información", "El segundo archivo no tiene hojas, por favor escoja un archivo de Excel con hojas.", "Ok");
                    return;
                }

                int maxRowsCount = Math.Max(sheet1.RowsUsed().Count(), sheet2.RowsUsed().Count());
                int maxColumnsCount = Math.Max(sheet1.ColumnsUsed().Count(), sheet2.ColumnsUsed().Count());

                // Compare

                using (var wbDiff = new XLWorkbook())
                {
                    var wsDiff = wbDiff.Worksheets.Add("Diferencias");

                    for (int rowIndex = 1; rowIndex <= maxRowsCount; rowIndex++)
                    {
                        for (int columnIndex = 1; columnIndex <= maxColumnsCount; columnIndex++)
                        {
                            IXLCell cell1 = sheet1.Cell(rowIndex, columnIndex);
                            IXLCell cell2 = sheet2.Cell(rowIndex, columnIndex);
                            IXLCell cellDiff = wsDiff.Cell(rowIndex, columnIndex);

                            // About styling: https://github.com/closedxml/closedxml/wiki/Styles-Fill
                            if (!cell2.IsEmpty())
                            {
                                cellDiff.Value = cell2.Value;

                                if (cell1.IsEmpty())
                                {
                                    // The cell was added in second file.
                                    cellDiff.Style.Fill.BackgroundColor = XLColor.PastelGreen;

                                }
                                else if (cell2.GetString() != cell1.GetString())
                                {
                                    // The cell was modified in second file.
                                    cellDiff.Style.Fill.BackgroundColor = XLColor.PastelOrange;
                                }
                            }
                            else if (!cell1.IsEmpty())
                            {
                                cellDiff.Value = cell1.Value;

                                // The cell was deleted in second file.
                                cellDiff.Style.Fill.BackgroundColor = XLColor.PastelRed;
                            }
                        }
                    }

                    wsDiff.Columns().AdjustToContents();

                    string timestampString = DateTime.Now.ToString("yyyy-MM-dd-HHmmss");

                    // About CacheDirectory: https://learn.microsoft.com/en-us/dotnet/maui/platform-integration/storage/file-system-helpers?view=net-maui-8.0&tabs=windows#cache-directory
                    comparationFilePath = Path.Combine(FileSystem.Current.CacheDirectory, $"Diferencias-{timestampString}.xlsx");
                    wbDiff.SaveAs(comparationFilePath);
                }
            }
        }

        _comparing = false;
    }

    private async Task OnSaveFileClickAsync()
    {
        CancellationToken cancellationToken = new CancellationTokenSource().Token;
        string fileName = Path.GetFileName(comparationFilePath);
        using Stream readStream = File.OpenRead(comparationFilePath);

        // About https://learn.microsoft.com/en-us/dotnet/communitytoolkit/maui/essentials/file-saver
        var fileSaverResult = await FileSaver.Default.SaveAsync(string.Empty, fileName, readStream, cancellationToken);

        if (fileSaverResult.IsSuccessful)
        {
            await Toast.Make("El archivo se guardó correctamente").Show(cancellationToken);
        }
        else
        {
            await Toast.Make($"Ocurrió un error al guardar el archivo: {fileSaverResult.Exception.Message}").Show(cancellationToken);
        }
    }

    private async Task OnShareButtonClickAsync()
    {
        // About Share files: https://learn.microsoft.com/en-us/dotnet/maui/platform-integration/data/share?view=net-maui-8.0&tabs=windows#share-a-file
        await Share.Default.RequestAsync(new ShareFileRequest
            {
                Title = "Compartir diferencias de los archivos XLSX",
                File = new ShareFile(comparationFilePath)
            });
    }
}
