<section class="step @(Parent?.ActiveStep == this ? "current" : null)">
    <h3 class="title" @onclick="ActivateIfCompleted">
        @Title @if (IsCompleted)
        {
            <span class="completed">
                @CompletedText
            </span>
        }
    </h3>
    @if (Parent?.ActiveStep == this)
    {
        <div class="container">
            <div class="content">
                @ChildContent
            </div>
            @if (ShowButtons)
            {
                <div class="btn-group buttons">
                    @if (!IsFirstStep)
                    {
                        <button class="btn btn-primary" @onclick="OnPrevButtonClick">Atrás</button>
                    }
                    @if (!IsLastStep)
                    {
                        <button class="btn btn-primary" disabled="@(!IsCompleted)" @onclick="OnNextButtonClick">Siguiente</button>
                    }
                    else
                    {
                        <button class="btn btn-success" disabled="@(!IsCompleted)" @onclick="OnFinishButtonClick">@Parent?.FinishButtonText</button>
                    }
                </div>
            }
        </div>
    }
</section>

@code {
    [CascadingParameter]
    public StepControl? Parent { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter, EditorRequired]
    public string Title { get; set; } = null!;

    [Parameter, EditorRequired]
    public string Name { get; set; } = null!;

    [Parameter, EditorRequired]
    public bool IsCompleted { get; set; }

    [Parameter]
    public string? CompletedText { get; set; } = "✔️";

    [Parameter]
    public bool ShowButtons { get; set; } = true;

    public bool IsFirstStep { get; set; }
    public bool IsLastStep { get; set; }

    protected override void OnInitialized()
    {
        if (Parent == null)
        {
            throw new ArgumentNullException(nameof(Parent), "Step must exist within a StepControl.");
        }

        base.OnInitialized();
        Parent?.AddStep(this);
    }

    private void ActivateIfCompleted()
    {
        if (IsCompleted)
        {
            Parent?.ActivateStep(this);
        }
    }

    private void OnPrevButtonClick() => Parent?.Prev(this);
    private void OnNextButtonClick() => Parent?.Next(this);
    private void OnFinishButtonClick() => Parent?.OnFinish.InvokeAsync();
}
